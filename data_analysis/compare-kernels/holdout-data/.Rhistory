mod = lm(sim_data ~ mat)
## are the leverages the same?##
svd_dev = uu %*% dd
hat_svd = svd_dev %*% solve(t(svd_dev) %*% svd_dev) %*% t(svd_dev)
hat = mat %*% solve(t(mat) %*% mat) %*% t(mat)
all(round(diag(hat_svd), 4) == round(diag(hat), 4)) # leverages are the same
svd_mod$coefficients * mySVD$d
mod$coefficients
# just numerically checking again
hat2 = array(0, dim=c(10,10))
for (ii in c(1:5)) {
hat2 = hat2 + svd_dev[ , ii] %*% t(svd_dev[ , ii])/as.double(t(svd_dev[ , ii]) %*% svd_dev[ , ii])
# hat2 = hat2 + X[ , ii] %*%t(X[ , ii])
}
print(round(hat2 - hat), 8) # functionally 0.
setwd("~/Google Drive/Fall 18/STSCI7170/HW4/")
setwd("~/Google Drive/Fall 18/STSCI7170/HW/HW4/")
data = read.csv("./airpollution.csv", header=T)
data
NW_resids = lm(NONWHITE ~ PRECIP + EDUC, data=air_dat)$resid
air_dat = read.csv("./airpollution.csv", header=T)
NW_resids = lm(NONWHITE ~ PRECIP + EDUC, data=air_dat)$resid
NW_resids = lm(NONWHITE ~ PRECIP + EDUC, data=air_dat)$resid
NOX_resids = lm(NOX ~ PRECIP + EDUC, data=air_dat)$resid
SO2_resids = lm(SO2 ~ PRECIP + EDUC, data=air_dat)$resid
new_dat = air_dat
colnames(new_dat) = c("CITY, MORT, PRECIP, EDUC, NW_resids, NOX_resids, SO2_resids")
NW_resids = lm(NONWHITE ~ PRECIP + EDUC, data=air_dat)$resid
NOX_resids = lm(NOX ~ PRECIP + EDUC, data=air_dat)$resid
SO2_resids = lm(SO2 ~ PRECIP + EDUC, data=air_dat)$resid
new_dat = air_dat
new_dat$NONWHITE = NW_resids
new_dat$NOX = NOX_resids
new_dat$SO2 = SO2_resids
colnames(new_dat) = c("CITY, MORT, PRECIP, EDUC, NW_resids, NOX_resids, SO2_resids")
all(round(original_fitted, 4) - round(new_fitted, 4) == 0)
original_fitted = lm(MORT ~ ., data=air_dat)$fitted
new_fitted = lm(MORT ~ ., data=new_dat)$fitted
setwd("~/Google Drive/Fall 18/STSCI7170/HW/HW4/")
air_dat = read.csv("./airpollution.csv", header=T)
NW_resids = lm(NONWHITE ~ PRECIP + EDUC, data=air_dat)$resid
NOX_resids = lm(NOX ~ PRECIP + EDUC, data=air_dat)$resid
SO2_resids = lm(SO2 ~ PRECIP + EDUC, data=air_dat)$resid
new_dat = air_dat
new_dat$NONWHITE = NW_resids
new_dat$NOX = NOX_resids
new_dat$SO2 = SO2_resids
colnames(new_dat) = c("CITY, MORT, PRECIP, EDUC, NW_resids, NOX_resids, SO2_resids")
original_fitted = lm(MORT ~ ., data=air_dat)$fitted
new_fitted = lm(MORT ~ ., data=new_dat)$fitted
new_data
new_adt
new_da
new_dat
NW_resids = lm(NONWHITE ~ PRECIP + EDUC, data=air_dat)$resid
NOX_resids = lm(NOX ~ PRECIP + EDUC, data=air_dat)$resid
SO2_resids = lm(SO2 ~ PRECIP + EDUC, data=air_dat)$resid
new_dat = air_dat
new_dat$NONWHITE = NW_resids
new_dat$NOX = NOX_resids
new_dat$SO2 = SO2_resids
colnames(new_dat) = c("CITY", "MORT", "PRECIP", "EDUC", "NW_resids", "NOX_resids", "SO2_resids")
original_fitted = lm(MORT ~ ., data=air_dat)$fitted
new_fitted = lm(MORT ~ ., data=new_dat)$fitted
all(round(original_fitted, 4) - round(new_fitted, 4) == 0)
all(round(original_fitted, 5) - round(new_fitted, 5) == 0)
all(round(original_fitted, 6) - round(new_fitted, 6) == 0) # fitted values are the same
mod = lm((SO2 + MORT) ~ ., data = air_dat)
summary(mod)
mod = lm(MORT ~ ., data=air_dat)
summary(mod)
mod = lm(MORT ~ ., data=air_dat)
original_fitted = lm(MORT ~ . - CITY, data=air_dat)$fitted
lm(MORT ~ . - CITY, data=air_dat)
mod = lm(MORT ~ . - CITY, data=air_dat)
summary(mod)
NW_resids = lm(NONWHITE ~ PRECIP + EDUC, data=air_dat)$resid
NOX_resids = lm(NOX ~ PRECIP + EDUC, data=air_dat)$resid
SO2_resids = lm(SO2 ~ PRECIP + EDUC, data=air_dat)$resid
new_dat = air_dat
new_dat$NONWHITE = NW_resids
new_dat$NOX = NOX_resids
new_dat$SO2 = SO2_resids
colnames(new_dat) = c("CITY", "MORT", "PRECIP", "EDUC",
"NW_resids", "NOX_resids", "SO2_resids")
original_fitted = lm(MORT ~ . - CITY, data=air_dat)$fitted
new_fitted = lm(MORT ~ . - CITY, data=new_dat)$fitted
all(round(original_fitted, 6) - round(new_fitted, 6) == 0) # fitted values are the same
mod = lm((SO2 + MORT) ~ . - CITY, data = air_dat)
summary(mod)
mod2 = lm(MORT ~ . - CITY)
mod2 = lm(MORT ~ . - CITY, data = air_dat)
summary(mod2)
model1 = lm(MORT ~ PRECIP + EDUC + NONWHITE + NOX + SO2)
model2 = lm((SO2 + MORT) ~ PRECIP + EDUC + NONWHITE + NOX + SO2)
model1 = lm(MORT ~ PRECIP + EDUC + NONWHITE + NOX + SO2, data=air_dat)
model2 = lm((SO2 + MORT) ~ PRECIP + EDUC + NONWHITE + NOX + SO2, data=air_dat)
model1 = lm(MORT ~ PRECIP + EDUC + NONWHITE + NOX + SO2, data=air_dat)
model2 = lm((SO2 + MORT) ~ PRECIP + EDUC + NONWHITE + NOX + SO2, data=air_dat)
anova(model1)
anova(model2)
summary(model1)
summary(model2)
model1 = lm(MORT ~ PRECIP + EDUC + NONWHITE + NOX + SO2, data=new_dat)
model1 = lm(MORT ~ PRECIP + EDUC + NW_resids + NOX_resids + SO2_resids, data=new_dat)
model2 = lm((SO2 + MORT) ~ PRECIP + EDUC + NW_resids + NOX_resids + SO2_resids, data=new_dat)
model1 = lm(MORT ~ PRECIP + EDUC + NW_resids + NOX_resids + SO2_resids, data=new_dat)
model2 = lm((air_dat$SO2 + MORT) ~ PRECIP + EDUC + NW_resids + NOX_resids + SO2_resids, data=new_dat)
anova(model1)
anova(model2)
meg = rbinom(n = 100, size=1, prob = .57)
me = rbinon(n=100, size=1, prob=0.92)
me = rbinom(n=100, size=1, prob=0.92)
sum(meg * me == 1)
x = 1:5
expand.grid(x)
expand.grid(x, x)
dist(x, x)
?dist
outer(x, x)
tau = (x - xp)^2
dist(x)
x
dist(x)
combn(1:4, 2)
abs(apply(combn(1:4,2), 2, diff))
?diff
diff(x, 1)
diff(x, 1)
diff(x, x)
diff(x)
diff(x, 2)
test <- function(x, xp, ls){
return( exp((x - xp)^2/2*ls) )
}
x = 1:5
y = 1:5
sapply(l, function(x) sapply(l, function(y) foo(x,y)))
test <- function(x, xp, ls){
return( exp((x - xp)^2/2*ls) )
}
l = 1:5
x = 1:5
y = 1:5
sapply(l, function(x) sapply(l, function(y) test(x,y)))
sapply(l, function(x) sapply(l, function(y) test(x,y, 2)))
out = sapply(l, function(x) sapply(l, function(y) test(x,y, 2)))
L = matrix(c(1, -1, 0, 0, 0, 0, -1, 1), nrow=2)
L %*% t(L)
L
L = matrix(c(1, -1, 0, 0, 0, 0, -1, 1), nrow=2, byrow = T)
L
L %*% t(L)
L = matrix(c(1, -1, 0, 0, 0, -1, 0, 1), nrow=2, byrow = T)
L %*% t(L)
library(MASS)
library(dplyr)
library(ggplot2)
d_full <- data.frame(x=seq(0,20,.01)) %>%
mutate(f=sin(x) + cos(x/2))
d_full$y <- d_full$f + rnorm(nrow(d_full),0,1)
d <- d_full[sample(1:nrow(d_full),30),]
d %>%
ggplot(aes(x=x,y=y)) +
geom_point() +
geom_line(data=d_full,aes(x=x,y=f),color="blue")
rbf <- function(x1,x2,l,a) {
a^2*exp(-(x1-x2)^2/l^2)
}
l <- 2
K_X_X <- matrix(nrow=nrow(d),ncol=nrow(d))
for(i in 1:length(d$x)) {
for(j in 1:length(d$x)) {
if(i <= j)
K_X_X[i,j] <- K_X_X[j,i] <- rbf(d$x[i],d$x[j],l,1)
}
}
K_Xnew_X <- matrix(nrow=nrow(d_full),ncol=nrow(d))
for(i in 1:nrow(d_full)) {
for(j in 1:nrow(d)) {
K_Xnew_X[i,j] <- rbf(d_full$x[i],d$x[j],l,1)
}
}
K_Xnew_Xnew <- matrix(nrow=nrow(d_full),ncol=nrow(d_full))
for(i in 1:nrow(d_full)) {
for(j in 1:nrow(d_full)) {
if(i <= j)
K_Xnew_Xnew[i,j] <- K_Xnew_Xnew[j,i] <- rbf(d_full$x[i],d_full$x[j],l,1)
}
}
pred_mean <- K_Xnew_X %*% (solve(K_X_X + diag(nrow(K_X_X)))) %*% d$y
pred_cov <- K_Xnew_Xnew -
K_Xnew_X %*% solve(K_X_X + diag(nrow(d))) %*% t(K_Xnew_X)
f_var <- diag(pred_cov)
d_full %>%
mutate(f_var=f_var) %>%
mutate(f_new=pred_mean) %>%
ggplot(aes(x=x,y=y)) +
#geom_point(alpha=0.3) +
geom_ribbon(aes(ymin=f_new-1.96*sqrt(f_var),
ymax=f_new+1.96*sqrt(f_var)),
fill="lightblue",
alpha=0.3) +
geom_point(data=d,aes(x=x,y=y),color="red") +
geom_line(aes(y=f),color="blue") +
geom_line(aes(y=f_new),color="orange")
d_full
View(d_full)
library(dplyr)
library(ggplot2)
library(MASS)
# functions
f1 <- function(x) {
80*sin(2*pi*x/10)
}
f2 <- function(x) {
40 + f1(x) + 3*sin(2*pi*x)
}
n <- 80
D <- data.frame(task=rep(c("one","two"),each=n),
x=rep(c(runif(n/2,0,2.5),runif(n/2,3,5)),2)) %>%
mutate(y=ifelse(task=="one",f1(x),f2(x)))
D$y <- D$y+rnorm(2*n,0,3)
plot(D$x,D$y,col=D$task)
curve(f1,0,10,1000,col="green",add=T)
curve(f2,0,10,1000,col="purple",add=T)
# first just try to draw from prior
k <- function(x1,x2,l,a) {
a^2*exp(-0.5*((x1 - x2)/l)^2)
}
kcross <- function(x1,x2,l1,l2,across) {
across^2*sqrt((2*l1*l2)/(l1^2+l2^2))*
exp(-(x1-x2)^2/(l1^2+l2^2))
}
#n <- 500
#X <- seq(0,5,length.out=n)
#k1xx <-  k2xx  <- k12xx <- matrix(rep(NA,n),
#                                       nrow=n,
#                                       ncol=n)
l1 <- 2.5
l2 <- 0.3
a1 <- 80
a2 <- 3
across <- 80*3
# X's are in D$x:
n <- length(D$x)/2
k1xx <- k2xx <- k12xx <- matrix(rep(NA,n^2),
nrow=n,
ncol=n)
for(i in 1:nrow(k1xx) ) {
for(j in 1:ncol(k1xx) ) {
if(i <= j) {
k1xx[i,j] <- k1xx[j,i] <- k(D$x[i],D$x[j],l1,a1)
k2xx[i,j] <- k2xx[j,i] <- k(D$x[i],D$x[j],l2,a2)
k12xx[i,j] <- k12xx[j,i] <- kcross(D$x[i],D$x[j],l1,l2,across)
}
}
}
KXX <- cbind(rbind(k1xx,
k12xx),
rbind(k12xx,
k2xx))
# We'll evaluate the posterior at the nn=500 points in X
nn <- 500
X <- seq(0,7,length.out=nn)
k1nx <-  k2nx <-  k12nx <- matrix(NA,nrow=n,ncol=nn)
for(i in 1:n ) {
for(j in 1:nn ) {
k1nx[i,j] <- k(D$x[i],X[j],l1,a1)
k2nx[i,j] <- k(D$x[i],X[j],l2,a2)
k12nx[i,j] <- kcross(D$x[i],X[j],l1,l2,across)
}
}
KNX <- cbind(rbind(k1nx,
k12nx),
rbind(k12nx,
k2nx))
k1nn <- k2nn <- k12nn <- matrix(NA, nrow=nn, ncol=nn)
for(i in 1:nn ) {
for(j in 1:nn ) {
if(i <= j) {
k1nn[i,j] <- k1nn[j,i] <- k(X[i],X[j],l1,a1)
k2nn[i,j] <- k2nn[j,i] <- k(X[i],X[j],l2,a2)
k12nn[i,j] <- k12nn[j,i] <- kcross(X[i],X[j],l1,l2,across)
}
}
}
KNN <- cbind(rbind(k1nn,
k12nn),
rbind(k12nn,
k2nn))
nrow(D)
dim(KXX)
plot(D$y)
plot(D$y ~ D$x)
plot(D$y[1:80] ~ D$x[1:80])
plot(D$y[81:160] ~ D$x[81:160])
helmert_mod
rm(list = ls())
library(dplyr)
library(ggplot2)
library(MASS)
# functions
f1 <- function(x) {
80*sin(2*pi*x/10)
}
f2 <- function(x) {
40 + f1(x) + 3*sin(2*pi*x)
}
n <- 80
D <- data.frame(task=rep(c("one","two"),each=n),
x=rep(c(runif(n/2,0,2.5),runif(n/2,3,5)),2)) %>%
mutate(y=ifelse(task=="one",f1(x),f2(x)))
D$y <- D$y+rnorm(2*n,0,3)
plot(D$x,D$y,col=D$task)
curve(f1,0,10,1000,col="green",add=T)
curve(f2,0,10,1000,col="purple",add=T)
# first just try to draw from prior
k <- function(x1,x2,l,a) {
a^2*exp(-0.5*((x1 - x2)/l)^2)
}
kcross <- function(x1,x2,l1,l2,across) {
across^2*sqrt((2*l1*l2)/(l1^2+l2^2))*
exp(-(x1-x2)^2/(l1^2+l2^2))
}
#n <- 500
#X <- seq(0,5,length.out=n)
#k1xx <-  k2xx  <- k12xx <- matrix(rep(NA,n),
#                                       nrow=n,
#                                       ncol=n)
l1 <- 2.5
l2 <- 0.3
a1 <- 1
a2 <- 1
across <- 80*3
across <- 1
# X's are in D$x:
n <- length(D$x)/2
n
D$x
D$y
plot(D$x,D$y,col=D$task)
D$task
D$x
n <- 10
D <- data.frame(task=rep(c("one","two"),each=n),
x=rep(1:n,2)) %>%
mutate(y=ifelse(task=="one",f1(x),f2(x)))
D$y <- D$y+rnorm(2*n,0,3)
plot(D$x,D$y,col=D$task)
curve(f1,0,10,1000,col="green",add=T)
curve(f2,0,10,1000,col="purple",add=T)
# first just try to draw from prior
k <- function(x1,x2,l,a) {
a^2*exp(-0.5*((x1 - x2)/l)^2)
}
kcross <- function(x1,x2,l1,l2,across) {
across^2*sqrt((2*l1*l2)/(l1^2+l2^2))*
exp(-(x1-x2)^2/(l1^2+l2^2))
}
#n <- 500
#X <- seq(0,5,length.out=n)
#k1xx <-  k2xx  <- k12xx <- matrix(rep(NA,n),
#                                       nrow=n,
#                                       ncol=n)
l1 <- 2.5
l2 <- 0.3
a1 <- 1
a2 <- 1
across <- 1
# X's are in D$x:
n <- length(D$x)/2
k1xx <- k2xx <- k12xx <- matrix(rep(NA,n^2),
nrow=n,
ncol=n)
for(i in 1:nrow(k1xx) ) {
for(j in 1:ncol(k1xx) ) {
if(i <= j) {
k1xx[i,j] <- k1xx[j,i] <- k(D$x[i],D$x[j],l1,a1)
k2xx[i,j] <- k2xx[j,i] <- k(D$x[i],D$x[j],l2,a2)
k12xx[i,j] <- k12xx[j,i] <- kcross(D$x[i],D$x[j],l1,l2,across)
}
}
}
KXX <- cbind(rbind(k1xx,
k12xx),
rbind(k12xx,
k2xx))
image(KXXX)
image(KXX)
head(KXX)
dim(KXX)
head(KXX)
KXX[1:10, 11:20]
KXX[1:10, 11:20]
KXX[11:20, 11:20]
rm(list = ls())
clear
library(dplyr)
library(ggplot2)
library(MASS)
# functions
f1 <- function(x) {
80*sin(2*pi*x/10)
}
f2 <- function(x) {
40 + f1(x) + 3*sin(2*pi*x)
}
n <- 10
D <- data.frame(task=rep(c("one","two"),each=n),
x=rep(1:n,2)) %>%
mutate(y=ifelse(task=="one",f1(x),f2(x)))
D$y <- D$y+rnorm(2*n,0,3)
plot(D$x,D$y,col=D$task)
curve(f1,0,10,1000,col="green",add=T)
curve(f2,0,10,1000,col="purple",add=T)
# first just try to draw from prior
k <- function(x1,x2,l,a) {
a^2*exp(-0.5*((x1 - x2)/l)^2)
}
kcross <- function(x1,x2,l1,l2,across) {
across^2*sqrt((2*l1*l2)/(l1^2+l2^2))*
exp(-(x1-x2)^2/(l1^2+l2^2))
}
#n <- 500
#X <- seq(0,5,length.out=n)
#k1xx <-  k2xx  <- k12xx <- matrix(rep(NA,n),
#                                       nrow=n,
#                                       ncol=n)
l1 <- 2.5
l2 <- 0.3
a1 <- 1
a2 <- 1
across <- 1
# X's are in D$x:
n <- length(D$x)/2
k1xx <- k2xx <- k12xx <- matrix(rep(NA,n^2),
nrow=n,
ncol=n)
for(i in 1:nrow(k1xx) ) {
for(j in 1:ncol(k1xx) ) {
if(i <= j) {
k1xx[i,j] <- k1xx[j,i] <- k(D$x[i],D$x[j],l1,a1)
k2xx[i,j] <- k2xx[j,i] <- k(D$x[i],D$x[j],l2,a2)
k12xx[i,j] <- k12xx[j,i] <- kcross(D$x[i],D$x[j],l1,l2,across)
}
}
}
KXX <- cbind(rbind(k1xx,
k12xx),
rbind(k12xx,
k2xx))
KXX
View(KXX)
setwd("~/Google Drive/Fall 18/ORIE6741/mkgp/data_analysis/ground_truth/")
list.files()
out = read.csv("ex2_mse.csv")
head(out)
setwd("~/Google Drive/Fall 18/ORIE6741/mkgp/data_analysis/compare-kernels/holdout-data/")
list.files()
library(ggplot2)
#library(cowplot)
library(dplyr)
library(tidyr)
setwd("~/Google Drive/Fall 18/ORIE6741/mkgp/data_analysis/compare-kernels/holdout-data/")
tasks <- "example1.csv"
mse_unif <- "all_mse.csv"
mse_int <- "all_interval_mse.csv"
mse_plots <- function(tasks,mse_unif,mse_int) {
ex1_tasks <- read.csv(tasks,header=F) %>%
gather(task,y,2:3)
task_plot <- ggplot(ex1_tasks,aes(x=V1,y=y,color=task)) +
scale_color_discrete(guide=F) +
scale_y_continuous(labels=NULL,breaks=NULL) +
labs(x=NULL,y=NULL) +
theme_bw() +
geom_line()
ex1_unif <- read.csv(mse_unif,header=F)
names(ex1_unif) <- c("meth","task","mse")
ex1_unif$train <- "uniform"
ex1_int <- read.csv(mse_int,header=F)
names(ex1_int) <- c("meth","task","mse")
ex1_int$train <- "interval"
ex1 <- rbind(ex1_unif,ex1_int) %>%
group_by(meth,task,train) %>%
summarize(mean=mean(mse),
se=sd(mse)/n())
ex1$meth <- relevel(ex1$meth,ref="Multi")
ex1$task <- as.factor(ex1$task)
mse_plot <- ggplot(ex1,aes(x=mean,color=task)) +
geom_point(aes(x=mean,y=0)) +
geom_errorbarh(aes(xmin=mean-2*se,xmax=mean+2*se,y=0)) +
labs(x="MSE") +
scale_y_continuous(name=NULL,labels=NULL,breaks = NULL) +
scale_color_discrete(guide=F) +
theme_bw() +
facet_grid(meth~train)
list(cowplot::plot_grid(task_plot,mse_plot,nrow=2,rel_heights=c(1,2),align="b"))
}
all_mse = read.csv(mse_unif)
all_mse = read.csv(mse_unif, header=F)
all_interval_mse = read.csv(mse_int, header=F)
names(all_mse) = c("meth", "task", "mse")
all_mse
summarize(mean=mean(mse))
out = all_mse %>% group_by(meth, task, train)
all_mse$train = "unif"
out = all_mse %>% group_by(meth, task, train)
out
out = all_mse %>% group_by(meth, task, train) %>% summarize(mean=mean(mse), se=sd(mse)/n())
out
out$mean
